name: Build and Release
permissions:
  contents: write
  packages: write
  actions: write
  deployments: write

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            artifact_name: GPT-CLI-win-x64
            runtime: win-x64
          - os: ubuntu-latest
            artifact_name: GPT-CLI-linux-x64
            runtime: linux-x64
          - os: macos-latest
            artifact_name: GPT-CLI-osx-x64
            runtime: osx-x64
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 7.0.x
    - name: Build and Publish
      shell: bash
      run: |
        dotnet publish gpt.csproj -c Release -r ${{ matrix.runtime }} --self-contained true -p:PublishSingleFile=true -o build/${{ matrix.artifact_name }}
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          mv build/${{ matrix.artifact_name }}/gpt.exe build/${{ matrix.artifact_name }}/${{ matrix.artifact_name }}.exe
        else
          mv build/${{ matrix.artifact_name }}/gpt build/${{ matrix.artifact_name }}/${{ matrix.artifact_name }}
        fi
        7z a -tzip ${{ matrix.artifact_name }}.zip build/${{ matrix.artifact_name }}/${{ matrix.artifact_name }}*

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}.zip
  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        path: ./artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/github-script@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const artifact_names = ['GPT-CLI-win-x64', 'GPT-CLI-linux-x64', 'GPT-CLI-osx-x64'];
          for (const artifact_name of artifact_names) {
            const asset_path = `artifacts/${artifact_name}.zip`;
            if (fs.existsSync(asset_path)) {
              await github.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: ${{ steps.create_release.outputs.id }},
                name: `${artifact_name}.zip`,
                data: fs.readFileSync(asset_path),
                headers: {
                  'content-type': 'application/zip',
                  'content-length': fs.statSync(asset_path).size,
                },
              });
            }
          }
